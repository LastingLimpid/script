3.1、调用awk
有三种方式调用awk，第一种是命令行方式，如：
awk [-F field-separator] ‘commands’ input-files
这里，commands是真正的awk命令。[-F域分隔符]是可选的，因为awk使用空格作为缺省的域分隔符，因此如果要浏览域间有空格的文本，不必指定这个选项，但如果要浏览诸如passwd文件，此文件各域以冒号作为分隔符，则必须指明-F选项。
第二种方法是将所有awk命令插入一个文件，并使awk程序可执行，然后用awk命令解释器作为脚本的首行，以便通过键入脚本名称来调用它。
第三种方式是将所有的awk命令插入一个单独文件，然后调用：
awk –f awk-script-file input-files
-f选项指明在文件awk_script_file中的awk脚本，input_file(s)是使用awk进行浏览的文件名。
3.2、awk脚本
在命令中调用awk时，awk脚本由各种操作和模式组成。
如果设置了-F选项，则awk每次读一条记录或一行，并使用指定的分隔符分隔指定域，但如果未设置-F选项，a w k假定空格为域分隔符，并保持这个设置直到发现一新行。当新行出现时，awk命令获悉已读完整条记录，然后在下一个记录启动读命令，这个读进程将持续到文件尾或文件不再存在。awk每次在文件中读一行，找到域分隔符（这里是符号#），设置其为域n，直至一新行（这里是缺省记录分隔符），然后，划分这一行作为一条记录，接着a w k再次启动下一行读进程。
3.2.1、模式和动作
任何awk语句都由模式和动作组成。在一个awk脚本中可能有许多语句。模式部分决定动作语句何时触发及触发事件。动作即对数据进行的操作。如果省略模式部分，动作将时刻保持执行状态。
模式可以是任何条件语句或复合语句或正则表达式。模式包括两个特殊字段BEGIN和
END。使用BEGIN语句设置计数和打印头。BEGIN语句使用在任何文本浏览动作之前，之后文本浏览动作依据输入文件开始执行。END语句用来在awk完成文本浏览动作后打印输出文本总数和结尾状态标志。如果不特别指明模式，awk总是匹配或打印行数。
实际动作在大括号{ }内指明。动作大多数用来打印，但是还有些更长的代码诸如if和循环语句及循环退出结构。如果不指明采取动作，awk将打印出所有浏览出来的记录。
下面将深入讲解这些模式和动作。
3.2.2、域和记录
awk执行时，其浏览域标记为$1，$2...$n。这种方法称为域标识。使用这些域标识将更容易对域进行进一步处理。$0表示所有域。（不要与shell里的$相混淆）Awk浏览时，到达一新行，即假定到达包含域的记录末尾，然后执行新记录下一行的读动作，并重新设置域分隔。
为打印一个域或所有域，使用print命令。这是一个awk动作（动作语法用圆括号括起来）。
保存awk输出：有两种方式保存shell提示符下awk脚本的输出。最简单的方式是使用输出重定向符号>文件名，显示屏上不会显示输出结果。第二种方法是使用tee命令，在输出到文件的同时输出到屏幕。
使用标准输入：实际上任何脚本都是从标准输入中接受输入的。（1）script_file input_file（2）script_file<input_file（3）input_file|script_file
打印报告头：打印信息头放置在BEGIN模式部分，因为打印信息头被界定为一个动作，必须用大括号括起来。在awk查看第一条记录前，信息头被打印。
打印信息尾：如果在末行加入end of report信息，可使用END语句。END语句在所有文本处理动作执行完之后才被执行。
awk错误信息：
确保整个awk命令用单引号括起来。
确保命令内所有引号成对出现。
确保用花括号括起动作语句，用圆括号括起条件语句。
可能忘记使用花括号，也许你认为没有必要，但awk不这样认为，将按之解释语法。
3.2.3、awk中正则表达式及其操作
这里正则表达式用斜线括起来。如：/Green/可以查出单词Green的出现情况。
3.2.4、条件操作符
       <，<=，==，!=，>=，~，!~
3.2.5、if语句
if(条件) 动作；
awk语句用；分隔
复合语句用{}组合
3.2.6、复合模式
&&，||，！
3.2.7、awk内置变量
    ARGC 命令行中传入awk脚本的参数个数
ARGV 命令行参数排列
ENVIRON 支持系统环境变量的使用
FILENAME awk脚本实际操作的输入文件
FNR 浏览文件的记录数
FS 设置输入域分隔符，等价于命令行-F选项
NF 浏览记录的域个数，在记录被读之后再设置
NR 已读的记录数
OFS 输出域分隔符，缺省为空格
ORS 输出记录分隔符，缺省为新行
RS记录分隔符，缺省为新行
3.2.8、awk操作符
在awk中使用操作符，基本表达式可以划分为数字型、字符串型、变量型、域及数组元素，在表达式中可以使用下述任何一种操作符。
赋值操作符：=  +=  *=  / =  %=  ^ =
条件表达操作符：?
并、与、非：||  &&  !
匹配操作符：~  !~
关系操作符：<  <=  ==  !=  >>
算术操作符：+  -  *  /  %  ^
前缀和后缀：++  --
设置输入域到域变量名：在awk中，设置有意义的域名是一种好习惯，在进行模式匹配或关系操作时更容易理解。一般的变量名设置方式为name=$n，这里name为调用的域变量名，n为实际域号。
域值比较操作：有两种方式测试一数值域是否小于另一数值域。（1）在BEGIN中给变量名赋值。（2）在关系操作中使用实际数值。通常在BEGIN部分赋值是很有益的，可以在awk表达式进行改动时减少很多麻烦。
修改数值域取值：当在awk中修改任何域时，重要的一点是要记住实际输入文件是不可修改的，修改的只是保存在缓存里的awk复本。为修改数值域，简单的给域标识重赋新值，如：$1=$1+5，会将域1数值加5，但要确保赋值域其子集为数值型。
修改文本域：修改文本域即对其重新赋值。需要做的就是赋给一个新的字符串。
创建新的输出域：在awk中处理数据时，基于各域进行计算时创建新域是一种好习惯。创建新域要通过其他域赋予新域标识符。如创建一个基于其他域的加法新域{ $4=$2+$3 }，这里假定记录包含3个域，则域4为新建域，保存域2和域3相加结果。
增加列值：为增加列数或进行运行结果统计，使用符号+=。增加的结果赋给符号左边变量值，增加到变量的域在符号右边。例如将$1加入变量total，表达式为total+=$1。
3.2.9、内置的字符串函数
gsub(r,s) 在整个$0中用s替代r
gsub(r,s,t) 在整个t中用s替代r
index(s,t) 返回s中字符串t的第一位置
length(s) 返回s长度
match(s,r) 测试s是否包含匹配r的字符串
split(s,a,fs) 在fs上将s分成序列a
sprint(fmt,exp) 返回经f m t格式化后的e x p
sub(r,s) 用$0中最左边最长的子串代替s
substr(s,p) 返回字符串s中从p开始的后缀部分
substr(s,p,n) 返回字符串s中从p开始长度为n的后缀部分
3.2.10、字符串屏蔽序列
使用字符串或正则表达式时，有时需要在输出中加入一新行或查询一元字符。打印一新行时，（新行为字符/n），给出其屏蔽序列，以不失其特殊含义，用法为在字符串前加入反斜线。
awk中使用的屏蔽序列：
/b    退格键
/t     tab键
/f     走纸换页
/ddd        八进制值
/n    新行
/c    任意其他特殊字符，例如/ /为反斜线符号
/r     回车键
9.2.11、awk输出函数printf
awk提供函数printf，拥有几种不同的格式化输出功能。例如按列输出、左对齐或右对齐方式。
每一种printf函数（格式控制字符）都以一个%符号开始，以一个决定转换的字符结束。转换包含三种修饰符。
printf函数基本语法是printf（[格式控制符]，参数），格式控制字符通常在引号里。
awk printf修饰符：
- 左对齐
Width 域的步长，用0表示0步长
.prec 最大字符串长度，或小数点右边的位数
awk printf格式：
%c ASCII字符
%d 整数
%e 浮点数，科学记数法
%f 浮点数，例如（123.44）
%g awk决定使用哪种浮点数转换e或者f
%o 八进制数
%s 字符串
%x 十六进制数
9.2.12、向一行a w k命令传值
在查看awk脚本前，先来查看怎样在awk命令行中传递变量。在awk执行前将值传入awk变量，需要将变量放在命令行中，格式如下：
awk 命令 变量=输入 文件值
awk也允许传入环境变量。
9.2.13、awk脚本文件
可以将awk脚本写入一个文件再执行它。命令不必很长（尽管这是写入一个脚本文件的主要原因），甚至可以接受一行命令。这样可以保存awk命令，以使不必每次使用时都需要重新输入。使用文件的另一个好处是可以增加注释，以便于理解脚本的真正用途和功能。
给所有awk程序加入awk扩展名是一种好习惯，这样通过查看文件名就知道这是一个awk程序。脚本文件第一行是!/bin/awk -f。这很重要，没有它自包含脚本将不能执行。这一行告之脚本系统中awk的位置。执行时，在脚本文件后键入输入文件名，但是首先要对脚本文件加入可执行权限。
9.2.14、在awk中使用F S变量
如果使用非空格符做域分隔符浏览文件，例如#或：，编写这样的一行命令很容易，因为使用FS选项可以在命令行中指定域分隔符。使用awk脚本时，记住设置FS变量是在BEGIN部分。如果不这样做， a w k将会发生混淆，不知道域分隔符是什么。
9.2.15、向awk脚本传值
向awk脚本传值与向awk一行命令传值方式大体相同，格式为：
awk_script_file var=value input_file
9.2.16、awk数组
前面讲述split函数时，提到怎样使用它将元素划分进一个数组。这里还有一个例子：
awk ‘BEGIN {print split (“123#456#789”,myarray,”#”)}’
3
在上面的例子中，split返回数组myarray下标数。实际上myarray数组为：
Myarray[1]=”123”
Myarray[2]=”456”
Myarray[1]=”789”
数组使用前，不必定义，也不必指定数组元素个数。经常使用循环来访问数组。下面是
一种循环类型的基本结构：
For (element in array ) print array[element]
4、sed用法介绍
    sed是一个非交互性文本流编辑器。它编辑文件或标准输入导出的文本拷贝。标准输入可能是来自键盘、文件重定向、字符串或变量，或者是一个管道的文本sed可以随意编辑小或大的文件，有许多sed命令用来编辑、删除，并允许做这项工作时不在现场。sed一次性处理所有改变，因而变得很有效，对用户来讲，最重要的是节省了时间。
使用sed需要记住的一个重要事实是，无论命令是什么， sed并不与初始化文件打交道，它操作的只是一个拷贝，然后所有的改动如果没有重定向到一个文件，将输出到屏幕。
因为sed是一个非交互性编辑器，必须通过行号或正则表达式指定要改变的文本行。
本章介绍s e d用法和功能。本章大多编写的是一行命令和小脚本。这样做可以慢慢加深对
4.1、sed怎样读取数据
sed从文件的一个文本行或从标准输入的几种格式中读取数据，将之拷贝到一个编辑缓冲区，然后读命令行或脚本的第一条命令，并使用这些命令查找模式或定位行号编辑输入文件。重复此过程直到命令结束。
4.2、调用sed
调用sed有三种方式：在命令行键入命令；将sed命令插入脚本文件，然后调用sed；将sed命令插入脚本文件，并使sed脚本可执行。
使用sed命令行格式为：
sed  [选项]  sed命令  输入文件。
记住在命令行使用sed命令时，实际命令要加单引号。sed也允许加双引号。
使用sed脚本文件，格式为：
sed  [选项]  -f  sed脚本文件  输入文件
要使用第一行具有sed命令解释器的sed脚本文件，其格式为：
sed脚本文件  [选项]  输入文件
不管是使用shell命令行方式或脚本文件方式，如果没有指定输入文件，sed从标准输入中接受输入，一般是键盘或重定向结果。
sed选项如下：
n 不打印；sed不写编辑行到标准输出，缺省为打印所有行（编辑和未编辑）。p命令可以用来打印编辑行。
c 下一命令是编辑命令。使用多项编辑时加入此选项。如果只用到一条sed命令，此选项无用，但指定它也没有关系。
f 如果正在调用sed脚本文件，使用此选项。此选项通知sed一个脚本文件支持所有的sed命令，例如：sed -f myscript.sed input_file，这里myscript.sed即为支持sed命令的文件。
4.2.1、保存sed输出
由于不接触初始化文件，如果想要保存改动内容，简单地将所有输出重定向到一个文件
即可。
4.2.2、使用sed在文件中查询文本的方式
sed浏览输入文件时，缺省从第一行开始，有两种方式定位文本：
1) 使用行号，可以是一个简单数字，或是一个行号范围。
2 ) 使用正则表达式
使用sed在文件中定位文本的方式：
x     x为一行号，如1
x,y          表示行号范围从x到y，如2，5表示从第2行到第5行
/pattern/         查询包含模式的行。例如/ d i s k /或/[a-z]/
/pattern/pattern/      查询包含两个模式的行。例如/disk/disks/
pattern/,x        在给定行号上查询包含模式的行。如/ribbon/,3
x,/pattern/       通过行号和模式查询匹配行。3./vdu/
x,y!        查询不包含指定行号x和y的行。1,2!
4.2.3、基本sed编辑命令
sed编辑命令：
p     打印匹配行
=     显示文件行号
a/     在定位行号后附加新文本信息
i/     在定位行号后插入新文本信息
d     删除定位行
c/    用新文本替换定位文本
s      使用替换模式替换相应模式
r      从另一个文件中读文本
w    写文本到一个文件
q     第一个模式匹配完成后推出或立即推出
l      显示与八进制ASCII代码等价的控制字符
{ }   在定位行执行的命令组
n     从另一个文件中读文本下一行，并附加在下一行
g     将模式2粘贴到/pattern n/
y     传送字符
n     延续到下一输入行；允许跨行的模式匹配语句
4.3、sed和正则表达式
sed识别任何基本正则表达式和模式及其行匹配规则。记住规则之一是：如果要定位一特殊字符，必须使用（/）屏蔽其特殊含义
4.4、基本sed编程举例
4.4.1、创建sed脚本文件
要创建脚本文件append.sed，输入下列命令：
pg append.sed
#!/bin/sed –f
/company/ a/
Then suddenly it happened
保存它，增加可执行权限。
4.4.2、附加、插入、修改、删除、替换文本
附加文本：
[address] a/
text
插入文本：
[address] i/
text
修改文本：
[address[,address]] c/
text
删除文本：
[address[,address]] d
替换文本：
[address[,address]] s /pattern-to-find/replacement-pattern/[g p w n]
s选项通知sed这是一个替换操作，并查询pattern-to-find，成功后用replacement-pattern替换它。
替换选项如下：
g     缺省情况下只替换第一次出现模式，使用g选项替换全局所有出现模式。
p     缺省sed将所有被替换行写入标准输出，加p选项将使- n选项无效。-n选项不打印输出结果。
w    文件名使用此选项将输出定向到一个文件。
4.5、使用替换修改字符串
如果要附加或修改一个字符串，可以使用（&）命令，&命令保存发现模式以便重新调用它，然后把它放在替换字符串里面。
4.6、将sed结果写入文件命令
像使用>文件重定向发送输出到一个文件一样，在sed命令中也可以将结果输入文件。格式有点像使用替换命令：
[address [，address]]w filename
‘w’选项通知s e d将结果写入文件。filename是自解释文件名。
4.7、从文件中读文本
处理文件时，sed允许从另一个文件中读文本，并将其文本附加在当前文件。此命令放在模式匹配行后，格式为：
address r filename
这里r通知sed将从另一个文件源中读文本。filename是其文件名。
4.8、匹配后退出
有时需要在模式匹配首次出现后退出sed，以便执行其他处理脚本。退出命令格式为：
address q
4.9、从shell向sed传值
要从命令行中向sed传值，值得注意的是用双引号，否则功能不执行。
NAME=”It is a go situation”
REPLACE=”GO”
echo $NAME | sed “s/go/$REPLACE/g”
It is a GO situation
4.10、从sed输出中设置shell变量
从sed输出中设置shell变量是一个简单的替换过程。运用上面的例子，创建shell变量NEW_NAME，保存上述sed例子的输出结果。
NAME=”It is a go situation”
REPLACE=”GO”
NEW_NAME=`echo $NAME | sed “s/go/$REPLACE/g”`
echo $NEW_NAME
It is a GO situation
